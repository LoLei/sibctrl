#!/usr/bin/env python3
# -*- mode: python; coding: utf-8 -*-
# Copyright © 2018 Göran Weinholt <goran@weinholt.se>
# SPDX-License-Identifier: LGPL-3.0-or-later

# SteelSeries Siberia 350 control software.

import argparse
import contextlib
import usb1                     # python-libusb1

# Equalizer
CMD_REG_EQL_80 = 0x40
CMD_REG_EQL_280 = 0x41
CMD_REG_EQL_1K = 0x42
CMD_REG_EQL_3_5K = 0x43
CMD_REG_EQL_13K = 0x44
CMD_EQL_SELECT = 0x46
CMD_EQL_DATA = 0x47
CMD_UNKNOWN_49 = 0x49
CMD_UNKNOWN_4A = 0x4A

EQL_REGISTERS = (
    CMD_REG_EQL_80,
    CMD_REG_EQL_280,
    CMD_REG_EQL_1K,
    CMD_REG_EQL_3_5K,
    CMD_REG_EQL_13K,
)

# Color.
CMD_UNKNOWN_80 = 0x80
CMD_SET_COLOR = 0x83
CMD_UNKNOWN_93 = 0x93
CMD_UNKNOWN_95 = 0x95

# Microphone.
CMD_MICROPHONE = 0xf0


def headset_command(command, payload):
    """Format a payload for a USB control write to the headset."""
    cmd = [0x01, 0x00, command, len(payload)] + payload
    cmd += [0] * (16 - len(cmd))

    return bytearray(cmd)


class Headset(object):
    """Class for controlling the headset."""

    VENDOR_ID = 0x1038
    PRODUCT_ID = 0x1229
    INTERFACE_NUM = 3

    def __init__(self):
        self.context = usb1.USBContext()
        # self.context.setDebug(usb1.LOG_LEVEL_DEBUG)
        self.handle = self.context.openByVendorIDAndProductID(self.VENDOR_ID, self.PRODUCT_ID)
        self.handle.setAutoDetachKernelDriver(True)
        self.handle.claimInterface(self.INTERFACE_NUM)

    def close(self):
        """Release USB resources."""
        self.handle.releaseInterface(self.INTERFACE_NUM)
        self.context.close()

    def _send(self, cmd):
        """Send a control command to the headset.

        The command should be generated by :py:func:`headset_command`.

        """
        self.handle.controlWrite(usb1.TYPE_CLASS | usb1.RECIPIENT_INTERFACE,
                                 request=9, value=0x0201, index=self.INTERFACE_NUM,
                                 data=cmd)

    def set_color(self, red, green, blue):
        """Set the color of the headset to the given RGB value (0-255 values)."""
        commands = (
            headset_command(CMD_UNKNOWN_95, [0x80, 0xbf]),
            headset_command(CMD_UNKNOWN_80, [0x52, 0x20]),
            headset_command(CMD_SET_COLOR, [red, green, blue]),
            headset_command(CMD_UNKNOWN_93, [0x03, 0x80])
        )
        for cmd in commands:
            self._send(cmd)

    def set_microphone_optimization(self, enable):
        """Enable or disable microphone automatic optimization."""
        cmd = headset_command(CMD_MICROPHONE, [0xf1 if enable else 0x00])
        self._send(cmd)

    def set_equalizer(self, band, value):
        """Set the value for an equalizer band.

        Bands: 80 Hz, 280 Hz, 1 kHz, 3.5 kHz, 13 kHz.
        Value is between 0x01 and 0x30 (low to high amplification, 0x18 neutral).

        """
        assert 0 <= band <= 5
        assert 0x01 <= value <= 0x30

        prologue = [
            headset_command(EQL_REGISTERS[band], [0x18]),
            headset_command(CMD_EQL_SELECT, [0x0d]),
            headset_command(CMD_EQL_SELECT, [band + 1])
        ]

        # Make 80 Hz go to the bottom
        values = (0x3f, 0xa4, 0x76, 0xd0, 0xe0, 0x5a, 0xa5, 0x0d, 0x00, 0x2d, 0x52, 0x86)
        # Make 80 Hz go upwards -OR- to the top
        values = (0x3f, 0xcf, 0x01, 0x46, 0xe0, 0x30, 0x1d, 0x01, 0x00, 0x18, 0x0e, 0x80)
        # Set 280 Hz to max
        values = (0x3f, 0x2c, 0xbd, 0x6e, 0xe0, 0xc9, 0x40, 0x1f, 0x00, 0x64, 0xa0, 0x0f)
        # Set 1K to max
        values = (0x3d, 0x4d, 0x31, 0x77, 0xe2, 0x25, 0x7e, 0x8f, 0x01, 0x12, 0xbf, 0x47)
        # Set 3.5K to max
        values = (0x30, 0x4d, 0xc8, 0x89, 0xe9, 0xb2, 0x7e, 0x76, 0x04, 0xd9, 0x3f, 0x3b)
        # Set 13K to max
        values = (0xf7, 0xb2, 0x05, 0x97, 0xfc, 0x36, 0x69, 0xb4, 0x0e, 0x1b, 0x34, 0xda)

        value_cmds = [headset_command(CMD_EQL_DATA, val) for val in values]

        epilogue = [
            headset_command(CMD_UNKNOWN_4A, [0x00]),
            headset_command(CMD_UNKNOWN_49, [0x04]),
            headset_command(EQL_REGISTERS[band], [value]),
            headset_command(CMD_EQL_SELECT, [0x0d]),
        ]

        for cmd in prologue + value_cmds + epilogue:
            self._send(cmd)


if __name__ == '__main__':
    with contextlib.closing(Headset()) as headset:
        headset.set_color(0x00, 0xff, 0x00)
